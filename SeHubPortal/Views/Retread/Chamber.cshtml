@model SeHubPortal.ViewModel.PlantViewModel
@{
    ViewBag.Title = "Chamber";
    Layout = null;
}

<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta name="viewport" content="width=device-width" />
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js"></script>
    <script src="https://cdn.datatables.net/1.10.16/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.10.16/js/dataTables.bootstrap4.min.js"></script>
    <script type="text/javascript" src="https://cdn.fusioncharts.com/fusioncharts/latest/fusioncharts.js"></script>
    <script type="text/javascript" src="https://cdn.fusioncharts.com/fusioncharts/latest/themes/fusioncharts.theme.fusion.js"></script>
    <script src="https://canvasjs.com/assets/script/canvasjs.min.js"></script>

    <style>

        #DashboardLink {
            display: block !important;
        }

        #PlantClicked {
            display: block !important;
        }


        #PlantBtn {
            font-weight: bold;
        }

        #PlantClicked {
            background-color: #f0f2f5;
            color: black;
            font-weight: 600;
        }

        #DashboardLink {
            color: black;
            font-weight: 700;
            background-color: #f0f2f5;
        }

        body {
            background-color: #f0f2f5;
            padding: 0px !important;
            margin: 0px !important;
        }

        .card-header h6 {
            color: black;
        }

        /* Hide scrollbar for IE, Edge and Firefox */
        .example {
            -ms-overflow-style: none; /* IE and Edge */
            scrollbar-width: none; /* Firefox */
        }

        .raphael-group-lVBmqXpj {
            display: none !important;
        }

                /* Hide scrollbar for Chrome, Safari and Opera */
        .example::-webkit-scrollbar {
          display: none;
        }

        /* Hide scrollbar for IE, Edge and Firefox */
        .example {
          -ms-overflow-style: none;  /* IE and Edge */
          scrollbar-width: none;  /* Firefox */
        }

        /* Chrome, Safari, Edge, Opera */
        input::-webkit-outer-spin-button,
        input::-webkit-inner-spin-button {
          -webkit-appearance: none;
          margin: 0;
        }

        /* Firefox */
        input[type=number] {
          -moz-appearance: textfield;
        }

    </style>

    <style type="text/css">
        [pointer-events="bounding-box"] {
    display: none
}
    </style>

</head>
<body class="example" style="overflow-y:auto; overflow-x:hidden">

    <div class="row">
        <div class="col-md-12">
            <div class="row" style="padding:10px 30px 10px 30px">
                <div class="col-md-4" style="padding:10px 10px 10px 20px; background-color:white; vertical-align:middle">
                    <a href="@Url.Action("Plant", "Retread")">Retread Plant</a> / Chamber
                </div>
                <div class="col-md-4" style="background-color:white; vertical-align:middle">
                </div>
                <div class="col-md-4" style="background-color:white; vertical-align:middle">
                </div>
            </div>

            <div class="row">
                <div class="col-md-3">
                    <div class="row" style="padding:10px 0px 10px 30px; height:100%">
                        <div class="col-md-12" style="height:100%; border:2px solid #8a8888; border-radius:15px; background-color:white; height:100%">

                            <div class="row">
                                <div class="col-md-12" style="display:flex; justify-content:space-between; padding-top:10px">
                                    <div style="font-weight:bold; font-size:20px">Production</div>
                                    <div style="display:flex; justify-content:center; align-items:center;">
                                        <div class="custom-control custom-switch">
                                            <label style="margin-right:40px; margin-left:0px; font-weight:normal">
                                                OFF
                                            </label>
                                            <input disabled type="checkbox" style="height:15px" class="custom-control-input" id="ToggleFromAuditToReport">
                                            <label class="custom-control-label" for="ToggleFromAuditToReport" style="font-weight:bold">
                                                ON
                                            </label>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <script>
                                setInterval(function () {
                                    $.ajax({
                                        url: '@Url.Action("ToggleProduction", "Retread")',
                                        success: function (data) {
                                            if (data == 'True') {
                                                $("#ToggleFromAuditToReport ").prop("checked", true);
                                                $("#loadEnvelopes ").prop("disabled", true);
                                            }
                                            else {
                                                $("#ToggleFromAuditToReport ").prop("checked", false);
                                                $("#loadEnvelopes ").prop("disabled", false);
                                            }
                                            
                                        }
                                    });
                                }, 10000);
                            </script>

                            <div class="row">
                                <div class="col-md-12" style="display:flex; justify-content:space-between; padding-top:10px; padding-bottom:10px">
                                    <div style="font-weight:bold; font-size:20px">Production ID</div>
                                    <div style="font-weight:bold; font-size:20px">
                                        <input readonly style="font-size:20px; text-align:right; border:none; outline:none" type="text" name="name" value=@Model.Chamber_production_ID />
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-12" style="display:flex; justify-content:space-between; padding-bottom:10px">
                                    <div><button disabled id="loadEnvelopes" data-toggle="modal" data-target="#loadMoadl" class="btn btn-primary" style="padding:0px 20px; font-weight:bold">Load</button></div>
                                    <div><button class="btn btn-primary" style="padding:0px 20px; font-weight:bold">Clear</button></div>
                                </div>
                            </div>

                            <script>
                                $(document).ready(function() {
                                  $('#loadEnvelopes').click(function() {
                                    setTimeout(function() {
                                        $('#1').focus();
                                    }, 600); // delay time in milliseconds (1 second)
                                  });
                                });
                            </script>

                            <table id="FuelLogTable" class="table table-striped table-bordered">
                                <thead style="background-color:#545557; color:white">
                                    <tr>
                                        <th style="text-align:center; font-size:8px; padding:0px; width:10%" scope="col">Position</th>
                                        <th style="text-align:center; font-size:8px; padding:0px; width:20%" scope="col">Envelope ID</th>
                                        <th style="text-align:center; font-size:8px; padding:0px; width:20%" scope="col">Barcode</th>
                                        <th style="text-align:center; font-size:8px; padding:0px; width:20%" scope="col">Customer Name</th>
                                        <th style="text-align:center; font-size:8px; padding:0px; width:15%" scope="col">Size</th>
                                        <th style="text-align:center; font-size:8px; padding:0px; width:15%" scope="col">Tread</th>
                                    </tr>
                                </thead>
                                <tbody style="background-color:white">
                                    @for (int i = 1; i <= 11; i++)
                                    {
                                        string pid = i + "P"; 
                                        string eid = i + "E"; 
                                        string bid = i + "B"; 
                                        string cid = i + "C"; 
                                        string sid = i + "S"; 
                                        string tid = i + "T"; 

                                        <tr style="font-size:8px; font-weight:bold">
                                            <td style="text-align:center; font-size:12px; padding:0px; vertical-align:middle" scope="col">
                                                <span id="@pid" >@i</span>
                                            </td>
                                            <td style="text-align:center; font-size:12px; padding:0px; vertical-align:middle" scope="col">
                                                <span  id="@eid"></span>
                                            </td>
                                            <td style="text-align:center; font-size:12px; padding:0px; vertical-align:middle" scope="col">
                                                <span  id="@bid"></span>
                                            </td>
                                            <td style="text-align:center; font-size:12px; padding:0px; vertical-align:middle" scope="col">
                                                <span  id="@cid"></span>
                                            </td>
                                            <td style="text-align:center; font-size:12px; padding:0px; vertical-align:middle" scope="col">
                                                <span  id="@sid"></span>
                                            </td>
                                            <td style="text-align:center; font-size:12px; padding:0px; vertical-align:middle" scope="col">
                                                <span  id="@tid"></span>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                            <hr />
                            <div class="row">
                                <div class="col-md-12" style="display:flex; width:100%; justify-content:space-between; align-items:center">
                                    @for (int i = 1; i <= 11; i++)
                                    {
                                        <b>@i</b>
                                    }
                                </div>
                            </div>
                            <hr />
                            <div class="row">
                                <div class="col-md-12" style="display:flex; width:100%; justify-content:center; align-items:center">
                                    <img src="~/Content/plant_chamber.png" style="width:40%; object-fit:contain" alt="Alternate Text" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-9">
                    <div class="row" style="padding:10px 30px 10px 20px">
                        <div class="col-md-12" style="border:2px solid #8a8888; border-radius:15px; background-color:white; height:100%">
                            <div class="row" style="display:flex; justify-content:space-evenly">
                                @foreach (var senser in Model.chamberSensors.Where(x => x.senser.Contains("Pressure")))
                                {
                                    <div id=@senser.name></div>
                                }
                            </div>
                        </div>
                    </div>

                    <div class="row" style="padding:10px 30px 10px 20px">
                        <div class="col-md-12" style="        border: 2px solid #8a8888;
        border-radius: 15px;
        background-color: white;
        height: 100%">
                            <div class="row" style="display:flex; justify-content:space-evenly">
                                @foreach (var senser in Model.chamberSensors.Where(x => x.senser.Contains("Temperature")))
                                {
                                    <div id=@senser.name></div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>



            <div class="row" style="padding:10px 30px 10px 30px">
                <div class="col-md-12" style="border:2px solid #8a8888; border-radius:15px; background-color:white; padding:20px; height:100%">
                    <div class="row">
                        <div class="commonClass pre1" id="chart-container_5_pressure_1"></div>
                    </div>
                    <div class="row">
                        <div class="commonClass temp1" id="chart-container_5_temperature_1"></div>
                    </div>
                </div>
            </div>



        </div>
    </div>

    <div class="modal fade" data-backdrop="static" id="loadMoadl" tabindex="-1" role="dialog" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content" style="width:400px">
                <div class="modal-header" style="padding: 5px 15px">
                    <h5 class="modal-title" style="color:black"><strong>Load Barcodes</strong></h5>
                    
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div id="clearInputs" class="col-md-12" style="display:flex; justify-content:center; align-items:center; flex-direction:column">
                            @for (int i = 1; i <= 11; i++)
                            {
                                <div style="display:flex; justify-content:space-evenly; width:100%; align-items:center">
                                    <label>
                                        @i
                                    </label>
                                    <input 
                                           
                                           maxlength="8" 
                                           onKeyPress="
                                                if (event.keyCode === 13) {
                                                    checkIfExists(this.value, this.id)                                                    
                                                }
                                           " 
                                           id=@i style="font-size:20px; 
                                           margin-bottom:15px; 
                                           text-align:center" 
                                    />
                                </div>
                                <script>

                                    function checkIfExists(val, id) {
                                        var count = 0;
                                        $('#clearInputs input').each(function () {
                                            if ($(this).val() == val) {
                                                count = count + 1;
                                            }
                                            if (count > 1) {
                                                $('#' + id).val('').focus()                                              
                                            }
                                        });  

                                        if (count <= 1) {
                                            var NextID = parseInt(id) + 1;
                                            $('#' + NextID).focus();
                                        }
                                        
                                    }
                                    
                                </script>
                            }
                        </div>
                    </div>
                </div>
                <div class="modal-footer" style="padding:2px 10px; display:flex; justify-content:space-between">
                    <div>
                        <button onclick="$('#clearInputs').find(':input').val(''); $('#1').focus()" class="btn btn-primary" style="padding:0px 10px">Clear</button>
                    </div>
                    <div style="display:flex; justify-content:space-between">
                        <button data-dismiss="modal" onclick="$('#clearInputs').find(':input').val('');" class="btn btn-danger" style="margin-right:10px; padding:0px 25px; font-weight:bold">Close</button>
                        <button data-dismiss="modal" onclick="SaveBarcodes()" class="btn btn-success" style="padding:0px 30px; font-weight:bold">Save</button>
                    </div>                    
                </div>
            </div>
        </div>
    </div>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="/epoch/js/ZeroClipboard.min.js"></script>

    <script>
        function SaveBarcodes() {
            $('#clearInputs input').each(function () {
                if ($(this).val() != '') {
                    //alert($(this).attr('id'))
                    $.ajax({
                        url: '@Url.Action("SaveEnvelopsChamber", "Retread")',
                        data: { envelope: $(this).val(), position: $(this).attr('id') },
                        type: 'POST',
                        async: false,
                        success: function (data) {

                        }
                    });
                }
            });

            $('#clearInputs').find(':input').val('');

            $.ajax({
                url: '@Url.Action("getChamberProduction", "Retread")',
                success: function (data) {
                    var ProductionItems = JSON.parse(data);
                    $(ProductionItems).each(function(i,val)
                    {
                        $('#'+ val.position + 'P').text(val.position)
                        $('#'+ val.position + 'E').text(val.envelope_id)
                        $('#'+ val.position + 'B').text(val.barcode)
                        $('#'+ val.position + 'C').text(val.customer_name.substring(0, 8))
                        $('#'+ val.position + 'S').text(val.size)
                        $('#'+ val.position + 'T').text(val.tread)

                    });
                }
            });

        }
    </script>

    <script>
        $(document).ready(function () {

            var activePressureCount = @Model.chamberSensors.Where(x => x.senser.Contains("Pressure")).Count();
            var activeTemperatureCount = @Model.chamberSensors.Where(x => x.senser.Contains("Temperature")).Count();
            var Pressurewidth = 100 / (activePressureCount)
            var Temperaturewidth = 100 / (activeTemperatureCount)

            var PressurewidthPerventage = Pressurewidth-2 + "%"
            var TemperaturewidthPerventage = Temperaturewidth-2 + "%"

            $.ajax({
                url: '@Url.Action("GetActiveSensors", "Retread")',
                data: { value: "Pressure" },
                type: 'POST',
                async: false,
                success: function (data) {
                    var Array = data.split(",");
                    $.each(Array, function (index, value) {
                        FusionCharts.ready(function() {
                           new FusionCharts({
                              type: "angulargauge",
                              renderAt: value,
                              width: PressurewidthPerventage,
                              dataFormat: "json",
                              dataSource: {
                                 chart: {
                                    caption: value,
                                    theme: "fusion",
                                    showValue: "1"
                                 },
                                 colorRange: {
                                    color: [
                                       {
                                          minValue: "0",
                                          maxValue: "50",
                                          code: "#62B58F"
                                       },
                                       {
                                          minValue: "50",
                                          maxValue: "100",
                                          code: "#FFC533"
                                       },
                                       {
                                          minValue: "100",
                                          maxValue: "150",
                                          code: "#F2726F"
                                       }
                                    ]
                                 },
                                 dials: {
                                    dial: [
                                       {
                                          value: "0",
                                          toolText: "<b>$dataValue metric tonnes</b>"
                                       }
                                    ]
                                 }
                              },
                              events: {
                                 initialized: function(evt, args) {
                                    var chartRef = evt.sender;
                                    function addLeadingZero(num) {
                                       return num <= 9 ? "0" + num : num;
                                    }

                                      function updateData() {

                                          $.ajax({
                                              url: '@Url.Action("GetPressureValue", "Retread")',
                                              data: { val: value.split("_")[1] },
                                              type: 'POST',
                                              async: false,
                                              success: function (data) {
                                                  var val = parseFloat(data),
                                                  strData = "&value=" + val + "&toolText=<b>" + val + " psi</b>";
                                                  chartRef.feedData(strData);
                                              }
                                          });

                                      }

                                    chartRef.intervalUpdateId = setInterval(updateData, 500);
                                 },

                                 disposed: function(evt, args) {
                                    clearInterval(evt.sender.intervalUpdateId);
                                 }
                              }
                           }).render();
                        });
                    });
                }
            });

            $.ajax({
                url: '@Url.Action("GetActiveSensors", "Retread")',
                data: { value: "Temperature" },
                type: 'POST',
                async: false,
                success: function (data) {
                    var Array = data.split(",");
                    $.each(Array, function (index, value) {
                        FusionCharts.ready(function () {
                            var chart = new FusionCharts({
                                type: 'thermometer',
                                renderAt: value,
                                id: 'myThm'+value.split('_')[1],
                                width: TemperaturewidthPerventage,
                                dataFormat: 'json',
                                dataSource: {
                                    "chart": {
                                        "theme": "fusion",
                                        "caption": value,
                                        "lowerLimit": "0",
                                        "upperLimit": "40",
                                        "numberSuffix": "°C",
                                        "decimals": "1",
                                        "thmFillColor": "#008ee4",
                                        "thmOriginX": "100",

                                        //Add hover effect
                                        "showhovereffect": "1",
                                        "plotFillHoverColor": "ff0000",
                                        "theme": "fusion"
                                    },
                                    "value": "0"
                                },
                                "events": {
                                    "initialized": function (evt, arg) {
                                        var dataUpdate = setInterval(function () {
                                            var datavalue;

                                            $.ajax({
                                                url: '@Url.Action("GetTemperatureValue", "Retread")',
                                                data: { val: value.split('_')[1] },
                                                type: 'POST',
                                                async: false,
                                                success: function (data) {
                                                    datavalue = parseFloat(data);
                                                }
                                            });

                                            FusionCharts.items["myThm"+value.split('_')[1]].feedData("&value=" + datavalue);
                                        }, 5000);
                                    }
                                }
                            })
                            .render();
                        });
                    });
                }
            });



            FusionCharts.ready(function () {

                var pressureDataset = []

                $.ajax({
                    url: '@Url.Action("GetActiveSensors", "Retread")',
                    data: { value: "Pressure" },
                    type: 'POST',
                    async: false,
                    success: function (data) {
                        var Array = data.split(",");
                        $.each(Array, function (index, value) {
                            let senser = { seriesname: value, data: [{}] };
                            pressureDataset.push(senser);
                        });
                    }
                });

              var stockPriceChart = new FusionCharts({
                  id: "pressureRealTimeChart",
                  type: 'realtimeline',
                  renderAt: 'chart-container_5_pressure_1',
                  width: '98%',
                  height: '400',
                  dataFormat: 'json',
                  dataSource: {
                    "chart": {
                      "caption": "Pressure",
                      "captionFontSize": "30",
                      "captionFontColor": "#028bed",
                      "captionFontBold": "1",
                      "yAxisName": "Pressure",
                      "numberSuffix": " PSI", //°C
                      "refreshinterval": "0.1",
                      "numdisplaysets": "50",
                      "labeldisplay": "rotate",
                      "showRealTimeValue": "0",
                      "theme": "fusion",
                      "legendPosition": "top-right",
                      "legendAllowDrag": "1",
                      "captionPosition": "top-left"
                    },
                    "categories": [{
                      "category": [{}]
                    }],
                    "dataset": pressureDataset
                  },
                  "events": {
                    "initialized": function(e) {
                      function addLeadingZero(num) {
                        return (num <= 9) ? ("0" + num) : num;
                      }

                          function updateData() {
                              $.ajax({
                                  url: '@Url.Action("GetAllPressureValue", "Retread")',
                                  type: 'POST',
                                  async: false,
                                  success: function (data) {
                                      var arr = data.split(';');
                                      var chartRef = FusionCharts("pressureRealTimeChart"),
                                      // We need to create a querystring format incremental update, containing
                                      // label in hh:mm:ss format
                                      // and a value (random).
                                      currDate = new Date(),
                                      label = addLeadingZero(currDate.getHours()) + ":" +
                                      addLeadingZero(currDate.getMinutes()) + ":" +
                                      addLeadingZero(currDate.getSeconds()),
                                      // Get random number between 35.25 & 35.75 - rounded to 2 decimal places
                                      randomValue = parseFloat(arr[0]),
                                      randomValue1 = parseFloat(arr[1]),
                                      randomValue2 = parseFloat(arr[2]),
                                      // Build Data String in format &label=...&value=...
                                      strData = "&label=" + label + "&value=" + randomValue + "|" + randomValue1 + "|" + randomValue2;
                                    // Feed it to chart.
                                    chartRef.feedData(strData);

                                  }
                              });
                          }

                      var myVar = setInterval(function() {
                        updateData();
                      }, 5000);
                    }
                  }
                })
                .render();
            });

            FusionCharts.ready(function () {

                var TemperatureDataset = []

                $.ajax({
                    url: '@Url.Action("GetActiveSensors", "Retread")',
                    data: { value: "Temperature" },
                    type: 'POST',
                    async: false,
                    success: function (data) {
                        var Array = data.split(",");
                        $.each(Array, function (index, value) {
                            let senser = { seriesname: value, data: [{}] };
                            TemperatureDataset.push(senser);
                        });
                    }
                });

              var stockPriceChart = new FusionCharts({
                  id: "temperatureRealTimeChart",
                  type: 'realtimeline',
                  renderAt: 'chart-container_5_temperature_1',
                  width: '98%',
                  height: '300',
                  dataFormat: 'json',
                  dataSource: {
                    "chart": {
                      "caption": "Temperature",
                      "captionFontSize": "30",
                      "captionFontColor": "#028bed",
                      "captionFontBold": "1",
                      "yAxisName": "Temperature",
                      "numberSuffix": " °C",
                      "refreshinterval": "0.1",
                      "numdisplaysets": "50",
                      "labeldisplay": "rotate",
                      "showRealTimeValue": "0",
                      "theme": "fusion",
                      "legendPosition": "bottom-right",
                      "legendAllowDrag": "1",
                      "captionPosition": "bottom-left"
                    },
                    "categories": [{
                      "category": [{}]
                    }],
                      "dataset": TemperatureDataset
                  },
                  "events": {
                    "initialized": function(e) {
                      function addLeadingZero(num) {
                        return (num <= 9) ? ("0" + num) : num;
                      }

                          function updateData() {
                              $.ajax({
                                  url: '@Url.Action("GetAllTemperatureValue", "Retread")',
                                  type: 'POST',
                                  async: false,
                                  success: function (data) {
                                      var arr = data.split(';');
                                      strData = "&label=" + "" + "&value="

                                      $.each(arr, function (index, value) {
                                          strData = strData + parseFloat(value) + "|"
                                      });

                                      var chartRef = FusionCharts("temperatureRealTimeChart")
                                    chartRef.feedData(strData);
                                  }
                              });
                          }

                      var myVar = setInterval(function() {
                        updateData();
                      }, 5000);
                    }
                  }
                })
                .render();
            });

        });
    </script>

</body>
</html>
